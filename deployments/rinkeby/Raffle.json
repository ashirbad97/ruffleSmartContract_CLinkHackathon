{
  "address": "0x9F1A756a3B459285a631e638236ba11652B97907",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "entranceFee",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interval",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vrfCoordinatorV2",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "gasLane",
          "type": "bytes32"
        },
        {
          "internalType": "uint64",
          "name": "subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "callbackGasLimit",
          "type": "uint32"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "have",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "want",
          "type": "address"
        }
      ],
      "name": "OnlyCoordinatorCanFulfill",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__RaffleNotOpen",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__SendMoreToEnterRaffle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__TransferFailed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Raffle__UpkeepNotNeeded",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "player",
          "type": "address"
        }
      ],
      "name": "RaffleEnter",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        }
      ],
      "name": "RequestedRaffleWinner",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        }
      ],
      "name": "WinnerPicked",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "NUM_WORDS",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_CONFIRMATIONS",
      "outputs": [
        {
          "internalType": "uint16",
          "name": "",
          "type": "uint16"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "checkUpKeep",
      "outputs": [
        {
          "internalType": "bool",
          "name": "upkeepNeeded",
          "type": "bool"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "enterRaffle",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_callbackGasLimit",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_entranceFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_gasLane",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_subscriptionId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "i_vrfCoordinator",
      "outputs": [
        {
          "internalType": "contract VRFCoordinatorV2Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "performUpKeep",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "requestId",
          "type": "uint256"
        },
        {
          "internalType": "uint256[]",
          "name": "randomWords",
          "type": "uint256[]"
        }
      ],
      "name": "rawFulfillRandomWords",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_lastTimeStamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_players",
      "outputs": [
        {
          "internalType": "address payable",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_raffleState",
      "outputs": [
        {
          "internalType": "enum Raffle.RaffleState",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "s_recentWinner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x00f7b12f239f72021eee3887d2061e125518341b461d30db06e070a021a4488f",
  "receipt": {
    "to": null,
    "from": "0x5a4F5B1661BB975Ded33b8c6BbA62CCaeE2578C3",
    "contractAddress": "0x9F1A756a3B459285a631e638236ba11652B97907",
    "transactionIndex": 34,
    "gasUsed": "1302000",
    "logsBloom": "0x
    "blockHash": "0x86ab50ca7549c34c4f49b8d8099459436ebfe414758bf9168d95f7aabf49ae45",
    "transactionHash": "0x00f7b12f239f72021eee3887d2061e125518341b461d30db06e070a021a4488f",
    "logs": [],
    "blockNumber": 10618855,
    "cumulativeGasUsed": "10657060",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "100000000000000000",
    "300",
    "0x6168499c0cFfCaCD319c818142124B7A15E857ab",
    "0xd89b2bf150e3b9e13446986e571fb9cab24b13cea0a43ea20a6049a85cc807cc",
    "3750",
    "500000"
  ],
  "numDeployments": 1,
  "solcInputHash": "4dfa0611cfb41d6ef54449f50b26883a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"entranceFee\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interval\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vrfCoordinatorV2\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"gasLane\",\"type\":\"bytes32\"},{\"internalType\":\"uint64\",\"name\":\"subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"callbackGasLimit\",\"type\":\"uint32\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"have\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"want\",\"type\":\"address\"}],\"name\":\"OnlyCoordinatorCanFulfill\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__RaffleNotOpen\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__SendMoreToEnterRaffle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__TransferFailed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Raffle__UpkeepNotNeeded\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"player\",\"type\":\"address\"}],\"name\":\"RaffleEnter\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"}],\"name\":\"RequestedRaffleWinner\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"}],\"name\":\"WinnerPicked\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"NUM_WORDS\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_CONFIRMATIONS\",\"outputs\":[{\"internalType\":\"uint16\",\"name\":\"\",\"type\":\"uint16\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"checkUpKeep\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"upkeepNeeded\",\"type\":\"bool\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"enterRaffle\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_callbackGasLimit\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_entranceFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_gasLane\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_subscriptionId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"i_vrfCoordinator\",\"outputs\":[{\"internalType\":\"contract VRFCoordinatorV2Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"performUpKeep\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"requestId\",\"type\":\"uint256\"},{\"internalType\":\"uint256[]\",\"name\":\"randomWords\",\"type\":\"uint256[]\"}],\"name\":\"rawFulfillRandomWords\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_lastTimeStamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_players\",\"outputs\":[{\"internalType\":\"address payable\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_raffleState\",\"outputs\":[{\"internalType\":\"enum Raffle.RaffleState\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"s_recentWinner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/raffle.sol\":\"Raffle\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\n/** ****************************************************************************\\n * @notice Interface for contracts using VRF randomness\\n * *****************************************************************************\\n * @dev PURPOSE\\n *\\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\\n * @dev making his output up to suit himself. Reggie provides Vera a public key\\n * @dev to which he knows the secret key. Each time Vera provides a seed to\\n * @dev Reggie, he gives back a value which is computed completely\\n * @dev deterministically from the seed and the secret key.\\n *\\n * @dev Reggie provides a proof by which Vera can verify that the output was\\n * @dev correctly computed once Reggie tells it to her, but without that proof,\\n * @dev the output is indistinguishable to her from a uniform random sample\\n * @dev from the output space.\\n *\\n * @dev The purpose of this contract is to make it easy for unrelated contracts\\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\\n * @dev 1. The fulfillment came from the VRFCoordinator\\n * @dev 2. The consumer contract implements fulfillRandomWords.\\n * *****************************************************************************\\n * @dev USAGE\\n *\\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\\n * @dev initialize VRFConsumerBase's attributes in their constructor as\\n * @dev shown:\\n *\\n * @dev   contract VRFConsumer {\\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\\n * @dev         <initialization with other arguments goes here>\\n * @dev       }\\n * @dev   }\\n *\\n * @dev The oracle will have given you an ID for the VRF keypair they have\\n * @dev committed to (let's call it keyHash). Create subscription, fund it\\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\\n * @dev subscription management functions).\\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\\n * @dev callbackGasLimit, numWords),\\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\\n *\\n * @dev Once the VRFCoordinator has received and validated the oracle's response\\n * @dev to your request, it will call your contract's fulfillRandomWords method.\\n *\\n * @dev The randomness argument to fulfillRandomWords is a set of random words\\n * @dev generated from your requestId and the blockHash of the request.\\n *\\n * @dev If your contract could have concurrent requests open, you can use the\\n * @dev requestId returned from requestRandomWords to track which response is associated\\n * @dev with which randomness request.\\n * @dev See \\\"SECURITY CONSIDERATIONS\\\" for principles to keep in mind,\\n * @dev if your contract could have multiple requests in flight simultaneously.\\n *\\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\\n * @dev differ.\\n *\\n * *****************************************************************************\\n * @dev SECURITY CONSIDERATIONS\\n *\\n * @dev A method with the ability to call your fulfillRandomness method directly\\n * @dev could spoof a VRF response with any random value, so it's critical that\\n * @dev it cannot be directly called by anything other than this base contract\\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\\n *\\n * @dev For your users to trust that your contract's random behavior is free\\n * @dev from malicious interference, it's best if you can write it so that all\\n * @dev behaviors implied by a VRF response are executed *during* your\\n * @dev fulfillRandomness method. If your contract must store the response (or\\n * @dev anything derived from it) and use it later, you must ensure that any\\n * @dev user-significant behavior which depends on that stored value cannot be\\n * @dev manipulated by a subsequent VRF request.\\n *\\n * @dev Similarly, both miners and the VRF oracle itself have some influence\\n * @dev over the order in which VRF responses appear on the blockchain, so if\\n * @dev your contract could have multiple VRF requests in flight simultaneously,\\n * @dev you must ensure that the order in which the VRF responses arrive cannot\\n * @dev be used to manipulate your contract's user-significant behavior.\\n *\\n * @dev Since the block hash of the block which contains the requestRandomness\\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\\n * @dev miner could, in principle, fork the blockchain to evict the block\\n * @dev containing the request, forcing the request to be included in a\\n * @dev different block with a different hash, and therefore a different input\\n * @dev to the VRF. However, such an attack would incur a substantial economic\\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\\n * @dev until it calls responds to a request. It is for this reason that\\n * @dev that you can signal to an oracle you'd like them to wait longer before\\n * @dev responding to the request (however this is not enforced in the contract\\n * @dev and so remains effective only in the case of unmodified oracle software).\\n */\\nabstract contract VRFConsumerBaseV2 {\\n  error OnlyCoordinatorCanFulfill(address have, address want);\\n  address private immutable vrfCoordinator;\\n\\n  /**\\n   * @param _vrfCoordinator address of VRFCoordinator contract\\n   */\\n  constructor(address _vrfCoordinator) {\\n    vrfCoordinator = _vrfCoordinator;\\n  }\\n\\n  /**\\n   * @notice fulfillRandomness handles the VRF response. Your contract must\\n   * @notice implement it. See \\\"SECURITY CONSIDERATIONS\\\" above for important\\n   * @notice principles to keep in mind when implementing your fulfillRandomness\\n   * @notice method.\\n   *\\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\\n   * @dev signature, and will call it once it has verified the proof\\n   * @dev associated with the randomness. (It is triggered via a call to\\n   * @dev rawFulfillRandomness, below.)\\n   *\\n   * @param requestId The Id initially returned by requestRandomness\\n   * @param randomWords the VRF output expanded to the requested number of words\\n   */\\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\\n\\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\\n  // the origin of the call\\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\\n    if (msg.sender != vrfCoordinator) {\\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\\n    }\\n    fulfillRandomWords(requestId, randomWords);\\n  }\\n}\\n\",\"keccak256\":\"0xec8b7e3032e887dd0732d2a5f8552ddce64a99a81b0008ef0bcf6cad68a535fc\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface VRFCoordinatorV2Interface {\\n  /**\\n   * @notice Get configuration relevant for making requests\\n   * @return minimumRequestConfirmations global min for request confirmations\\n   * @return maxGasLimit global max for request gas limit\\n   * @return s_provingKeyHashes list of registered key hashes\\n   */\\n  function getRequestConfig()\\n    external\\n    view\\n    returns (\\n      uint16,\\n      uint32,\\n      bytes32[] memory\\n    );\\n\\n  /**\\n   * @notice Request a set of random words.\\n   * @param keyHash - Corresponds to a particular oracle job which uses\\n   * that key for generating the VRF proof. Different keyHash's have different gas price\\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\\n   * @param subId  - The ID of the VRF subscription. Must be funded\\n   * with the minimum subscription balance required for the selected keyHash.\\n   * @param minimumRequestConfirmations - How many blocks you'd like the\\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\\n   * for why you may want to request more. The acceptable range is\\n   * [minimumRequestBlockConfirmations, 200].\\n   * @param callbackGasLimit - How much gas you'd like to receive in your\\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\\n   * may be slightly less than this amount because of gas used calling the function\\n   * (argument decoding etc.), so you may need to request slightly more than you expect\\n   * to have inside fulfillRandomWords. The acceptable range is\\n   * [0, maxGasLimit]\\n   * @param numWords - The number of uint256 random values you'd like to receive\\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\\n   * @return requestId - A unique identifier of the request. Can be used to match\\n   * a request to a response in fulfillRandomWords.\\n   */\\n  function requestRandomWords(\\n    bytes32 keyHash,\\n    uint64 subId,\\n    uint16 minimumRequestConfirmations,\\n    uint32 callbackGasLimit,\\n    uint32 numWords\\n  ) external returns (uint256 requestId);\\n\\n  /**\\n   * @notice Create a VRF subscription.\\n   * @return subId - A unique subscription id.\\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n   * @dev Note to fund the subscription, use transferAndCall. For example\\n   * @dev  LINKTOKEN.transferAndCall(\\n   * @dev    address(COORDINATOR),\\n   * @dev    amount,\\n   * @dev    abi.encode(subId));\\n   */\\n  function createSubscription() external returns (uint64 subId);\\n\\n  /**\\n   * @notice Get a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @return balance - LINK balance of the subscription in juels.\\n   * @return reqCount - number of requests for this subscription, determines fee tier.\\n   * @return owner - owner of the subscription.\\n   * @return consumers - list of consumer address which are able to use this subscription.\\n   */\\n  function getSubscription(uint64 subId)\\n    external\\n    view\\n    returns (\\n      uint96 balance,\\n      uint64 reqCount,\\n      address owner,\\n      address[] memory consumers\\n    );\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @param newOwner - proposed new owner of the subscription\\n   */\\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\\n\\n  /**\\n   * @notice Request subscription owner transfer.\\n   * @param subId - ID of the subscription\\n   * @dev will revert if original owner of subId has\\n   * not requested that msg.sender become the new owner.\\n   */\\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\\n\\n  /**\\n   * @notice Add a consumer to a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - New consumer which can use the subscription\\n   */\\n  function addConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Remove a consumer from a VRF subscription.\\n   * @param subId - ID of the subscription\\n   * @param consumer - Consumer to remove from the subscription\\n   */\\n  function removeConsumer(uint64 subId, address consumer) external;\\n\\n  /**\\n   * @notice Cancel a subscription\\n   * @param subId - ID of the subscription\\n   * @param to - Where to send the remaining LINK to\\n   */\\n  function cancelSubscription(uint64 subId, address to) external;\\n}\\n\",\"keccak256\":\"0xcb29ee50ee2b05441e4deebf8b4756a0feec4f5497e36b6a1ca320f7ce561802\",\"license\":\"MIT\"},\"contracts/raffle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// Define the version of solidity that we are going to use\\npragma solidity ^0.8.7;\\n\\n// Defining the Chainlink Oracle\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\\\";\\n// Not sure why we needed this. Look more into this\\nimport \\\"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\\\";\\n// Defining a custom error. We use this since they are more gas efficient. Look more into custom errors.\\nerror Raffle__SendMoreToEnterRaffle();\\nerror Raffle__RaffleNotOpen();\\nerror Raffle__UpkeepNotNeeded();\\nerror Raffle__TransferFailed();\\n\\n// N.B: An important obsrevation, as a coding standard it is better to define the variable type i.e by \\\"s_\\\" / \\\"i_\\\". to let the developers know the\\n// type of the variable that they are dealing with\\n\\n// Define the contract, we are inheriting the mentioned contract\\ncontract Raffle is VRFConsumerBaseV2 {\\n    // Defining enum to establish the state of the smart contract\\n    // An enum is a datatype which can only have a fixed number of values and nothing beyond it\\n    // N.B: Although for only two states a bool could have been better, even unit256 are better gas wise\\n    // The below has been done for more code readability\\n    enum RaffleState {\\n        Open,\\n        Calculating\\n    }\\n    // A state variable to keep track of the state of the smart contract. Since storage defined by \\\"s_\\\".\\n    // Recap: Variables which are global are by default state/storage. Variables that are inside the functions, unless in some cases are in memory.\\n    RaffleState public s_raffleState;\\n    // Global variable for the entrance fee.\\n    // N.B: Check again whagt do those i_ and s_ mean ?\\n    // \\\"i_\\\" is defined to let devs know that using this will be cheap\\n    uint256 public immutable i_entranceFee;\\n    address payable[] public s_players;\\n    uint256 private immutable i_interval;\\n    uint256 public s_lastTimeStamp;\\n    VRFCoordinatorV2Interface public immutable i_vrfCoordinator;\\n    bytes32 public i_gasLane;\\n    uint64 public i_subscriptionId;\\n    uint16 public constant REQUEST_CONFIRMATIONS = 3;\\n    uint32 public i_callbackGasLimit;\\n    // Defines the number of random numbers that we want\\n    uint32 public constant NUM_WORDS = 1;\\n    address public s_recentWinner;\\n    // Define an event when a new user is onboarded into the lottery\\n    // Look into properly what the parameters mean\\n    event RaffleEnter(address indexed player);\\n    event RequestedRaffleWinner(uint256 indexed requestId);\\n    event WinnerPicked(address indexed winner);\\n\\n    // Constructor definition\\n    constructor(\\n        uint256 entranceFee,\\n        uint256 interval,\\n        address vrfCoordinatorV2,\\n        bytes32 gasLane,\\n        uint64 subscriptionId,\\n        uint32 callbackGasLimit\\n    )\\n        // Find out why did we need to do this in the constructor, maybe look a the contract signature\\n        VRFConsumerBaseV2(vrfCoordinatorV2)\\n    {\\n        i_entranceFee = entranceFee;\\n        i_interval = interval;\\n        s_lastTimeStamp = block.timestamp;\\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\\n        i_gasLane = gasLane;\\n        i_subscriptionId = subscriptionId;\\n    }\\n\\n    // Function for entering the lottery\\n    function enterRaffle() external payable {\\n        // Performing initial checks to verify if the proper entrance fee has been paid or not and to check the state of the contract if it is open\\n        // or not\\n\\n        // Not using require with the string as it is not gas friendly\\n        // require(msg.value > i_entranceFee, \\\"Not enough money sent !!\\\");\\n        if (msg.value < i_entranceFee) {\\n            // reverting the custom error\\n            // look more into the reverting keyword\\n            revert Raffle__SendMoreToEnterRaffle();\\n        }\\n        // Open Calculating a winner\\n        // First check the state of the smart-contract if it is open or not\\n        if (s_raffleState != RaffleState.Open) {\\n            revert Raffle__RaffleNotOpen();\\n        }\\n        // After verifying the above checks proceed to onboard the users to onboard into the lottery\\n        // You can enter\\n        s_players.push(payable(msg.sender));\\n        // Emitting the event with the user address\\n        emit RaffleEnter(msg.sender);\\n    }\\n\\n    // N.B: To select a winner we want to\\n    // 1. Do this automatically\\n    // 2. We want a real random winner\\n\\n    // Checkout ChainLink Keepers and find out how the function, like an event trigerring some transaction on the blockchain\\n\\n    // 1. Be True after certian time intervals\\n    // 2. The lottery has to be open\\n    // 3. The contract has ETH\\n    // 4. Keepers has LINK\\n\\n    // Function to determine if the upkeep has to be performed or not\\n    // Checkout further the functionality of this Keepes function\\n    // N.B: From preliminary understanding this is a function which checks for a number of conditions if the required conditions are satisfied\\n    // for running an upkeep, i.e most likely some other off chain function will be calling it to know if the UpKeep can be performed or not\\n    // Some of the memory parameters are commented out because they are not required but for the compilation of the contract it should be syntactically\\n    // be present\\n    function checkUpKeep(\\n        bytes memory /* checkData */\\n    )\\n        public\\n        view\\n        returns (\\n            bool upkeepNeeded,\\n            bytes memory /* performData */\\n        )\\n    {\\n        // Variable to store if the state of the contract is open or not\\n        bool isOpen = RaffleState.Open == s_raffleState;\\n        // Variable to check and store if the interval between the current timestamp and the previous timestamp is greater than the interval\\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\\n        // Variable to check if the contract has enough ETH balance\\n        bool hasBalance = address(this).balance > 0;\\n        // Variable to check and store if the number of players present is greater than 0\\n        bool hasPlayer = s_players.length > 0;\\n        // N.B: Since upkeepNeeded is already defined in the return signature we don't need to define it again\\n        // IMPORTANT way of writing a condition and storing in the variable\\n        upkeepNeeded = (isOpen && timePassed && hasBalance && hasPlayer);\\n        // Later agument is defined as a blank argument since we don't actually need it but only for syntactical purpose\\n        return (upkeepNeeded, \\\"0x0\\\");\\n    }\\n\\n    // Function to perform the upkeep i.e trigger this to choose our winner\\n    function performUpKeep(\\n        bytes calldata /* performData */\\n    ) external {\\n        // This function will basically first check the checkUpKeep function to determine if the conditions are meet to perform the upKeep\\n        (bool upkeepNeeded, ) = checkUpKeep(\\\"\\\");\\n        // Instead of doing a require or something we are using a if conditional statement\\n        if (!upkeepNeeded) {\\n            revert Raffle__UpkeepNotNeeded();\\n        }\\n        // Change the state of the Raffle to calculating so that no other players can be entered into the raffle\\n        // This is different than the Keeper, while keepers will initiate this function from outside, this will use Chainlink to generate random number\\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\\n            i_gasLane,\\n            i_subscriptionId,\\n            REQUEST_CONFIRMATIONS,\\n            i_callbackGasLimit,\\n            NUM_WORDS\\n        );\\n        // Find out what event does this emit\\n        emit RequestedRaffleWinner(requestId);\\n    }\\n\\n    // Find out what is a override function\\n    // This function is already present in the contract from which we are inheriting and will override it\\n    function fulfillRandomWords(\\n        uint256, /*requestId*/\\n        // An array of random numbers\\n        uint256[] memory randomWords\\n    ) internal override {\\n        // Find the index by the module operation by the players length\\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\\n        // Specify the recent winner by the index generated\\n        address payable recentWinner = s_players[indexOfWinner];\\n        s_recentWinner = recentWinner;\\n        // Reset our players array to 0\\n        s_players = new address payable[](0);\\n        // Reset the RaffleState\\n        s_raffleState = RaffleState.Open;\\n        // Reset the last time stamp with the current time\\n        s_lastTimeStamp = block.timestamp;\\n        // Pay the recent winner, the award is the entire amount owned by the contract i.e through the entrance fees\\n        // N.B: The below is actually a very good way to pay as we are just calling a adrress but not any function\\n        // so better use call with the payload instead of transfer or send\\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\\\"\\\");\\n        if (!success) {\\n            revert Raffle__TransferFailed();\\n        }\\n        emit WinnerPicked(recentWinner);\\n    }\\n}\\n\",\"keccak256\":\"0x55ab436f7b040d0c687658494a64e1bfab6b472c913c8348747c6239ca32f32b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b506040516200188f3803806200188f83398181016040528101906200003891906200016e565b838073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b81525050508560a081815250508460c08181525050426002819055508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff1660601b815250508260038190555081600460006101000a81548167ffffffffffffffff021916908367ffffffffffffffff160217905550505050505050620002fd565b6000815190506200010c816200027b565b92915050565b600081519050620001238162000295565b92915050565b6000815190506200013a81620002af565b92915050565b6000815190506200015181620002c9565b92915050565b6000815190506200016881620002e3565b92915050565b60008060008060008060c087890312156200018e576200018d62000276565b5b60006200019e89828a0162000129565b9650506020620001b189828a0162000129565b9550506040620001c489828a01620000fb565b9450506060620001d789828a0162000112565b9350506080620001ea89828a0162000157565b92505060a0620001fd89828a0162000140565b9150509295509295509295565b6000620002178262000228565b9050919050565b6000819050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b600080fd5b62000286816200020a565b81146200029257600080fd5b50565b620002a0816200021e565b8114620002ac57600080fd5b50565b620002ba8162000248565b8114620002c657600080fd5b50565b620002d48162000252565b8114620002e057600080fd5b50565b620002ee8162000262565b8114620002fa57600080fd5b50565b60805160601c60a05160c05160e05160601c61153d620003526000396000818161070301526108ab01526000610601015260008181610434015261081c01526000818161037401526103c8015261153d6000f3fe6080604052600436106100e85760003560e01c806372cf6e341161008a578063ae771f6b11610059578063ae771f6b146102b4578063aebc4550146102f1578063cc45483f1461031c578063d757d02714610347576100e8565b806372cf6e34146102085780637ea3e6c1146102335780638638b0c61461025e5780638e879c8a14610289576100e8565b8063470cdf97116100c6578063470cdf971461014b5780635e6c102e1461017657806367f082b0146101b45780636c7c8f17146101df576100e8565b80631fe543e3146100ed5780632cfcc539146101165780633485404314610120575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190610e4b565b610372565b005b61011e610432565b005b34801561012c57600080fd5b5061013561059f565b60405161014291906110fc565b60405180910390f35b34801561015757600080fd5b506101606105a5565b60405161016d9190611132565b60405180910390f35b34801561018257600080fd5b5061019d60048036038101906101989190610da8565b6105bf565b6040516101ab92919061100d565b60405180910390f35b3480156101c057600080fd5b506101c96106a6565b6040516101d691906110e1565b60405180910390f35b3480156101eb57600080fd5b5061020660048036038101906102019190610d5b565b6106ab565b005b34801561021457600080fd5b5061021d610815565b60405161022a9190611117565b60405180910390f35b34801561023f57600080fd5b5061024861081a565b60405161025591906110fc565b60405180910390f35b34801561026a57600080fd5b5061027361083e565b6040516102809190610fae565b60405180910390f35b34801561029557600080fd5b5061029e610864565b6040516102ab919061103d565b60405180910390f35b3480156102c057600080fd5b506102db60048036038101906102d69190610df1565b61086a565b6040516102e89190610fc9565b60405180910390f35b3480156102fd57600080fd5b506103066108a9565b60405161031391906110ab565b60405180910390f35b34801561032857600080fd5b506103316108cd565b60405161033e91906110c6565b60405180910390f35b34801561035357600080fd5b5061035c6108de565b6040516103699190611117565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161041b929190610fe4565b60405180910390fd5b61042e82826108f4565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561048c576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a05761049f61141d565b5b60008054906101000a900460ff1660018111156104c0576104bf61141d565b5b146104f7576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60025481565b600460009054906101000a900467ffffffffffffffff1681565b6000606060008060009054906101000a900460ff1660018111156105e6576105e561141d565b5b600060018111156105fa576105f961141d565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261062e91906111f6565b1190506000804711905060008060018054905011905083801561064e5750825b80156106575750815b80156106605750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600381565b60006106c5604051806020016040528060008152506105bf565b509050806106ff576040517f8e4bc81700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600354600460009054906101000a900467ffffffffffffffff166003600460089054906101000a900463ffffffff1660016040518663ffffffff1660e01b815260040161078e959493929190611058565b602060405180830381600087803b1580156107a857600080fd5b505af11580156107bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e09190610e1e565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6001818154811061087a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b600460089054906101000a900463ffffffff1681565b6000600180549050826000815181106109105761090f61144c565b5b6020026020010151610922919061138e565b905060006001828154811061093a5761093961144c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806004600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109c3576109c261147b565b5b6040519080825280602002602001820160405280156109f15781602001602082028036833780820191505090505b5060019080519060200190610a07929190610b26565b5060008060006101000a81548160ff02191690836001811115610a2d57610a2c61141d565b5b02179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a5f90610f99565b60006040518083038185875af1925050503d8060008114610a9c576040519150601f19603f3d011682016040523d82523d6000602084013e610aa1565b606091505b5050905080610adc576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b9f579160200282015b82811115610b9e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b46565b5b509050610bac9190610bb0565b5090565b5b80821115610bc9576000816000905550600101610bb1565b5090565b6000610be0610bdb84611172565b61114d565b90508083825260208201905082856020860282011115610c0357610c026114b4565b5b60005b85811015610c335781610c198882610d31565b845260208401935060208301925050600181019050610c06565b5050509392505050565b6000610c50610c4b8461119e565b61114d565b905082815260208101848484011115610c6c57610c6b6114b9565b5b610c7784828561131b565b509392505050565b600082601f830112610c9457610c936114af565b5b8135610ca4848260208601610bcd565b91505092915050565b60008083601f840112610cc357610cc26114af565b5b8235905067ffffffffffffffff811115610ce057610cdf6114aa565b5b602083019150836001820283011115610cfc57610cfb6114b4565b5b9250929050565b600082601f830112610d1857610d176114af565b5b8135610d28848260208601610c3d565b91505092915050565b600081359050610d40816114f0565b92915050565b600081519050610d55816114f0565b92915050565b60008060208385031215610d7257610d716114c3565b5b600083013567ffffffffffffffff811115610d9057610d8f6114be565b5b610d9c85828601610cad565b92509250509250929050565b600060208284031215610dbe57610dbd6114c3565b5b600082013567ffffffffffffffff811115610ddc57610ddb6114be565b5b610de884828501610d03565b91505092915050565b600060208284031215610e0757610e066114c3565b5b6000610e1584828501610d31565b91505092915050565b600060208284031215610e3457610e336114c3565b5b6000610e4284828501610d46565b91505092915050565b60008060408385031215610e6257610e616114c3565b5b6000610e7085828601610d31565b925050602083013567ffffffffffffffff811115610e9157610e906114be565b5b610e9d85828601610c7f565b9150509250929050565b610eb08161123c565b82525050565b610ebf8161122a565b82525050565b610ece8161124e565b82525050565b610edd8161125a565b82525050565b6000610eee826111cf565b610ef881856111da565b9350610f0881856020860161132a565b610f11816114c8565b840191505092915050565b610f25816112d3565b82525050565b610f34816112e5565b82525050565b6000610f476000836111eb565b9150610f52826114d9565b600082019050919050565b610f6681611277565b82525050565b610f75816112a5565b82525050565b610f84816112af565b82525050565b610f93816112bf565b82525050565b6000610fa482610f3a565b9150819050919050565b6000602082019050610fc36000830184610eb6565b92915050565b6000602082019050610fde6000830184610ea7565b92915050565b6000604082019050610ff96000830185610eb6565b6110066020830184610eb6565b9392505050565b60006040820190506110226000830185610ec5565b81810360208301526110348184610ee3565b90509392505050565b60006020820190506110526000830184610ed4565b92915050565b600060a08201905061106d6000830188610ed4565b61107a6020830187610f8a565b6110876040830186610f5d565b6110946060830185610f7b565b6110a16080830184610f7b565b9695505050505050565b60006020820190506110c06000830184610f1c565b92915050565b60006020820190506110db6000830184610f2b565b92915050565b60006020820190506110f66000830184610f5d565b92915050565b60006020820190506111116000830184610f6c565b92915050565b600060208201905061112c6000830184610f7b565b92915050565b60006020820190506111476000830184610f8a565b92915050565b6000611157611168565b9050611163828261135d565b919050565b6000604051905090565b600067ffffffffffffffff82111561118d5761118c61147b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111b9576111b861147b565b5b6111c2826114c8565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611201826112a5565b915061120c836112a5565b92508282101561121f5761121e6113bf565b5b828203905092915050565b600061123582611285565b9050919050565b600061124782611285565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611272826114dc565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006112de826112f7565b9050919050565b60006112f082611264565b9050919050565b600061130282611309565b9050919050565b600061131482611285565b9050919050565b82818337600083830152505050565b60005b8381101561134857808201518184015260208101905061132d565b83811115611357576000848401525b50505050565b611366826114c8565b810181811067ffffffffffffffff821117156113855761138461147b565b5b80604052505050565b6000611399826112a5565b91506113a4836112a5565b9250826113b4576113b36113ee565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106114ed576114ec61141d565b5b50565b6114f9816112a5565b811461150457600080fd5b5056fea26469706673582212200b6f7073c990c944fa5b94a6aa60f912c1f00499f8dc97609dac2a72632afba964736f6c63430008070033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c806372cf6e341161008a578063ae771f6b11610059578063ae771f6b146102b4578063aebc4550146102f1578063cc45483f1461031c578063d757d02714610347576100e8565b806372cf6e34146102085780637ea3e6c1146102335780638638b0c61461025e5780638e879c8a14610289576100e8565b8063470cdf97116100c6578063470cdf971461014b5780635e6c102e1461017657806367f082b0146101b45780636c7c8f17146101df576100e8565b80631fe543e3146100ed5780632cfcc539146101165780633485404314610120575b600080fd5b3480156100f957600080fd5b50610114600480360381019061010f9190610e4b565b610372565b005b61011e610432565b005b34801561012c57600080fd5b5061013561059f565b60405161014291906110fc565b60405180910390f35b34801561015757600080fd5b506101606105a5565b60405161016d9190611132565b60405180910390f35b34801561018257600080fd5b5061019d60048036038101906101989190610da8565b6105bf565b6040516101ab92919061100d565b60405180910390f35b3480156101c057600080fd5b506101c96106a6565b6040516101d691906110e1565b60405180910390f35b3480156101eb57600080fd5b5061020660048036038101906102019190610d5b565b6106ab565b005b34801561021457600080fd5b5061021d610815565b60405161022a9190611117565b60405180910390f35b34801561023f57600080fd5b5061024861081a565b60405161025591906110fc565b60405180910390f35b34801561026a57600080fd5b5061027361083e565b6040516102809190610fae565b60405180910390f35b34801561029557600080fd5b5061029e610864565b6040516102ab919061103d565b60405180910390f35b3480156102c057600080fd5b506102db60048036038101906102d69190610df1565b61086a565b6040516102e89190610fc9565b60405180910390f35b3480156102fd57600080fd5b506103066108a9565b60405161031391906110ab565b60405180910390f35b34801561032857600080fd5b506103316108cd565b60405161033e91906110c6565b60405180910390f35b34801561035357600080fd5b5061035c6108de565b6040516103699190611117565b60405180910390f35b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461042457337f00000000000000000000000000000000000000000000000000000000000000006040517f1cf993f400000000000000000000000000000000000000000000000000000000815260040161041b929190610fe4565b60405180910390fd5b61042e82826108f4565b5050565b7f000000000000000000000000000000000000000000000000000000000000000034101561048c576040517f3038c00a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018111156104a05761049f61141d565b5b60008054906101000a900460ff1660018111156104c0576104bf61141d565b5b146104f7576040517fd24a271400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055503373ffffffffffffffffffffffffffffffffffffffff167f0805e1d667bddb8a95f0f09880cf94f403fb596ce79928d9f29b74203ba284d460405160405180910390a2565b60025481565b600460009054906101000a900467ffffffffffffffff1681565b6000606060008060009054906101000a900460ff1660018111156105e6576105e561141d565b5b600060018111156105fa576105f961141d565b5b14905060007f00000000000000000000000000000000000000000000000000000000000000006002544261062e91906111f6565b1190506000804711905060008060018054905011905083801561064e5750825b80156106575750815b80156106605750805b9550856040518060400160405280600381526020017f30783000000000000000000000000000000000000000000000000000000000008152509550955050505050915091565b600381565b60006106c5604051806020016040528060008152506105bf565b509050806106ff576040517f8e4bc81700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635d3b1d30600354600460009054906101000a900467ffffffffffffffff166003600460089054906101000a900463ffffffff1660016040518663ffffffff1660e01b815260040161078e959493929190611058565b602060405180830381600087803b1580156107a857600080fd5b505af11580156107bc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107e09190610e1e565b9050807fcd6e45c8998311cab7e9d4385596cac867e20a0587194b954fa3a731c93ce78b60405160405180910390a250505050565b600181565b7f000000000000000000000000000000000000000000000000000000000000000081565b6004600c9054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60035481565b6001818154811061087a57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008054906101000a900460ff1681565b600460089054906101000a900463ffffffff1681565b6000600180549050826000815181106109105761090f61144c565b5b6020026020010151610922919061138e565b905060006001828154811061093a5761093961144c565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050806004600c6101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550600067ffffffffffffffff8111156109c3576109c261147b565b5b6040519080825280602002602001820160405280156109f15781602001602082028036833780820191505090505b5060019080519060200190610a07929190610b26565b5060008060006101000a81548160ff02191690836001811115610a2d57610a2c61141d565b5b02179055504260028190555060008173ffffffffffffffffffffffffffffffffffffffff1647604051610a5f90610f99565b60006040518083038185875af1925050503d8060008114610a9c576040519150601f19603f3d011682016040523d82523d6000602084013e610aa1565b606091505b5050905080610adc576040517fa1d04b3900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff167f5b690ec4a06fe979403046eaeea5b3ce38524683c3001f662c8b5a829632f7df60405160405180910390a25050505050565b828054828255906000526020600020908101928215610b9f579160200282015b82811115610b9e5782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610b46565b5b509050610bac9190610bb0565b5090565b5b80821115610bc9576000816000905550600101610bb1565b5090565b6000610be0610bdb84611172565b61114d565b90508083825260208201905082856020860282011115610c0357610c026114b4565b5b60005b85811015610c335781610c198882610d31565b845260208401935060208301925050600181019050610c06565b5050509392505050565b6000610c50610c4b8461119e565b61114d565b905082815260208101848484011115610c6c57610c6b6114b9565b5b610c7784828561131b565b509392505050565b600082601f830112610c9457610c936114af565b5b8135610ca4848260208601610bcd565b91505092915050565b60008083601f840112610cc357610cc26114af565b5b8235905067ffffffffffffffff811115610ce057610cdf6114aa565b5b602083019150836001820283011115610cfc57610cfb6114b4565b5b9250929050565b600082601f830112610d1857610d176114af565b5b8135610d28848260208601610c3d565b91505092915050565b600081359050610d40816114f0565b92915050565b600081519050610d55816114f0565b92915050565b60008060208385031215610d7257610d716114c3565b5b600083013567ffffffffffffffff811115610d9057610d8f6114be565b5b610d9c85828601610cad565b92509250509250929050565b600060208284031215610dbe57610dbd6114c3565b5b600082013567ffffffffffffffff811115610ddc57610ddb6114be565b5b610de884828501610d03565b91505092915050565b600060208284031215610e0757610e066114c3565b5b6000610e1584828501610d31565b91505092915050565b600060208284031215610e3457610e336114c3565b5b6000610e4284828501610d46565b91505092915050565b60008060408385031215610e6257610e616114c3565b5b6000610e7085828601610d31565b925050602083013567ffffffffffffffff811115610e9157610e906114be565b5b610e9d85828601610c7f565b9150509250929050565b610eb08161123c565b82525050565b610ebf8161122a565b82525050565b610ece8161124e565b82525050565b610edd8161125a565b82525050565b6000610eee826111cf565b610ef881856111da565b9350610f0881856020860161132a565b610f11816114c8565b840191505092915050565b610f25816112d3565b82525050565b610f34816112e5565b82525050565b6000610f476000836111eb565b9150610f52826114d9565b600082019050919050565b610f6681611277565b82525050565b610f75816112a5565b82525050565b610f84816112af565b82525050565b610f93816112bf565b82525050565b6000610fa482610f3a565b9150819050919050565b6000602082019050610fc36000830184610eb6565b92915050565b6000602082019050610fde6000830184610ea7565b92915050565b6000604082019050610ff96000830185610eb6565b6110066020830184610eb6565b9392505050565b60006040820190506110226000830185610ec5565b81810360208301526110348184610ee3565b90509392505050565b60006020820190506110526000830184610ed4565b92915050565b600060a08201905061106d6000830188610ed4565b61107a6020830187610f8a565b6110876040830186610f5d565b6110946060830185610f7b565b6110a16080830184610f7b565b9695505050505050565b60006020820190506110c06000830184610f1c565b92915050565b60006020820190506110db6000830184610f2b565b92915050565b60006020820190506110f66000830184610f5d565b92915050565b60006020820190506111116000830184610f6c565b92915050565b600060208201905061112c6000830184610f7b565b92915050565b60006020820190506111476000830184610f8a565b92915050565b6000611157611168565b9050611163828261135d565b919050565b6000604051905090565b600067ffffffffffffffff82111561118d5761118c61147b565b5b602082029050602081019050919050565b600067ffffffffffffffff8211156111b9576111b861147b565b5b6111c2826114c8565b9050602081019050919050565b600081519050919050565b600082825260208201905092915050565b600081905092915050565b6000611201826112a5565b915061120c836112a5565b92508282101561121f5761121e6113bf565b5b828203905092915050565b600061123582611285565b9050919050565b600061124782611285565b9050919050565b60008115159050919050565b6000819050919050565b6000819050611272826114dc565b919050565b600061ffff82169050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b600063ffffffff82169050919050565b600067ffffffffffffffff82169050919050565b60006112de826112f7565b9050919050565b60006112f082611264565b9050919050565b600061130282611309565b9050919050565b600061131482611285565b9050919050565b82818337600083830152505050565b60005b8381101561134857808201518184015260208101905061132d565b83811115611357576000848401525b50505050565b611366826114c8565b810181811067ffffffffffffffff821117156113855761138461147b565b5b80604052505050565b6000611399826112a5565b91506113a4836112a5565b9250826113b4576113b36113ee565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b50565b600281106114ed576114ec61141d565b5b50565b6114f9816112a5565b811461150457600080fd5b5056fea26469706673582212200b6f7073c990c944fa5b94a6aa60f912c1f00499f8dc97609dac2a72632afba964736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 166,
        "contract": "contracts/raffle.sol:Raffle",
        "label": "s_raffleState",
        "offset": 0,
        "slot": "0",
        "type": "t_enum(RaffleState)163"
      },
      {
        "astId": 171,
        "contract": "contracts/raffle.sol:Raffle",
        "label": "s_players",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address_payable)dyn_storage"
      },
      {
        "astId": 175,
        "contract": "contracts/raffle.sol:Raffle",
        "label": "s_lastTimeStamp",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 180,
        "contract": "contracts/raffle.sol:Raffle",
        "label": "i_gasLane",
        "offset": 0,
        "slot": "3",
        "type": "t_bytes32"
      },
      {
        "astId": 182,
        "contract": "contracts/raffle.sol:Raffle",
        "label": "i_subscriptionId",
        "offset": 0,
        "slot": "4",
        "type": "t_uint64"
      },
      {
        "astId": 187,
        "contract": "contracts/raffle.sol:Raffle",
        "label": "i_callbackGasLimit",
        "offset": 8,
        "slot": "4",
        "type": "t_uint32"
      },
      {
        "astId": 192,
        "contract": "contracts/raffle.sol:Raffle",
        "label": "s_recentWinner",
        "offset": 12,
        "slot": "4",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_address_payable)dyn_storage": {
        "base": "t_address_payable",
        "encoding": "dynamic_array",
        "label": "address payable[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_enum(RaffleState)163": {
        "encoding": "inplace",
        "label": "enum Raffle.RaffleState",
        "numberOfBytes": "1"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      }
    }
  }
}