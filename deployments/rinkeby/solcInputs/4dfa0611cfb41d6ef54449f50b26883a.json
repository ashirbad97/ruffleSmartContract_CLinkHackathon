{
  "language": "Solidity",
  "sources": {
    "contracts/raffle.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// Define the version of solidity that we are going to use\npragma solidity ^0.8.7;\n\n// Defining the Chainlink Oracle\nimport \"@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol\";\n// Not sure why we needed this. Look more into this\nimport \"@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol\";\n// Defining a custom error. We use this since they are more gas efficient. Look more into custom errors.\nerror Raffle__SendMoreToEnterRaffle();\nerror Raffle__RaffleNotOpen();\nerror Raffle__UpkeepNotNeeded();\nerror Raffle__TransferFailed();\n\n// N.B: An important obsrevation, as a coding standard it is better to define the variable type i.e by \"s_\" / \"i_\". to let the developers know the\n// type of the variable that they are dealing with\n\n// Define the contract, we are inheriting the mentioned contract\ncontract Raffle is VRFConsumerBaseV2 {\n    // Defining enum to establish the state of the smart contract\n    // An enum is a datatype which can only have a fixed number of values and nothing beyond it\n    // N.B: Although for only two states a bool could have been better, even unit256 are better gas wise\n    // The below has been done for more code readability\n    enum RaffleState {\n        Open,\n        Calculating\n    }\n    // A state variable to keep track of the state of the smart contract. Since storage defined by \"s_\".\n    // Recap: Variables which are global are by default state/storage. Variables that are inside the functions, unless in some cases are in memory.\n    RaffleState public s_raffleState;\n    // Global variable for the entrance fee.\n    // N.B: Check again whagt do those i_ and s_ mean ?\n    // \"i_\" is defined to let devs know that using this will be cheap\n    uint256 public immutable i_entranceFee;\n    address payable[] public s_players;\n    uint256 private immutable i_interval;\n    uint256 public s_lastTimeStamp;\n    VRFCoordinatorV2Interface public immutable i_vrfCoordinator;\n    bytes32 public i_gasLane;\n    uint64 public i_subscriptionId;\n    uint16 public constant REQUEST_CONFIRMATIONS = 3;\n    uint32 public i_callbackGasLimit;\n    // Defines the number of random numbers that we want\n    uint32 public constant NUM_WORDS = 1;\n    address public s_recentWinner;\n    // Define an event when a new user is onboarded into the lottery\n    // Look into properly what the parameters mean\n    event RaffleEnter(address indexed player);\n    event RequestedRaffleWinner(uint256 indexed requestId);\n    event WinnerPicked(address indexed winner);\n\n    // Constructor definition\n    constructor(\n        uint256 entranceFee,\n        uint256 interval,\n        address vrfCoordinatorV2,\n        bytes32 gasLane,\n        uint64 subscriptionId,\n        uint32 callbackGasLimit\n    )\n        // Find out why did we need to do this in the constructor, maybe look a the contract signature\n        VRFConsumerBaseV2(vrfCoordinatorV2)\n    {\n        i_entranceFee = entranceFee;\n        i_interval = interval;\n        s_lastTimeStamp = block.timestamp;\n        i_vrfCoordinator = VRFCoordinatorV2Interface(vrfCoordinatorV2);\n        i_gasLane = gasLane;\n        i_subscriptionId = subscriptionId;\n    }\n\n    // Function for entering the lottery\n    function enterRaffle() external payable {\n        // Performing initial checks to verify if the proper entrance fee has been paid or not and to check the state of the contract if it is open\n        // or not\n\n        // Not using require with the string as it is not gas friendly\n        // require(msg.value > i_entranceFee, \"Not enough money sent !!\");\n        if (msg.value < i_entranceFee) {\n            // reverting the custom error\n            // look more into the reverting keyword\n            revert Raffle__SendMoreToEnterRaffle();\n        }\n        // Open Calculating a winner\n        // First check the state of the smart-contract if it is open or not\n        if (s_raffleState != RaffleState.Open) {\n            revert Raffle__RaffleNotOpen();\n        }\n        // After verifying the above checks proceed to onboard the users to onboard into the lottery\n        // You can enter\n        s_players.push(payable(msg.sender));\n        // Emitting the event with the user address\n        emit RaffleEnter(msg.sender);\n    }\n\n    // N.B: To select a winner we want to\n    // 1. Do this automatically\n    // 2. We want a real random winner\n\n    // Checkout ChainLink Keepers and find out how the function, like an event trigerring some transaction on the blockchain\n\n    // 1. Be True after certian time intervals\n    // 2. The lottery has to be open\n    // 3. The contract has ETH\n    // 4. Keepers has LINK\n\n    // Function to determine if the upkeep has to be performed or not\n    // Checkout further the functionality of this Keepes function\n    // N.B: From preliminary understanding this is a function which checks for a number of conditions if the required conditions are satisfied\n    // for running an upkeep, i.e most likely some other off chain function will be calling it to know if the UpKeep can be performed or not\n    // Some of the memory parameters are commented out because they are not required but for the compilation of the contract it should be syntactically\n    // be present\n    function checkUpKeep(\n        bytes memory /* checkData */\n    )\n        public\n        view\n        returns (\n            bool upkeepNeeded,\n            bytes memory /* performData */\n        )\n    {\n        // Variable to store if the state of the contract is open or not\n        bool isOpen = RaffleState.Open == s_raffleState;\n        // Variable to check and store if the interval between the current timestamp and the previous timestamp is greater than the interval\n        bool timePassed = ((block.timestamp - s_lastTimeStamp) > i_interval);\n        // Variable to check if the contract has enough ETH balance\n        bool hasBalance = address(this).balance > 0;\n        // Variable to check and store if the number of players present is greater than 0\n        bool hasPlayer = s_players.length > 0;\n        // N.B: Since upkeepNeeded is already defined in the return signature we don't need to define it again\n        // IMPORTANT way of writing a condition and storing in the variable\n        upkeepNeeded = (isOpen && timePassed && hasBalance && hasPlayer);\n        // Later agument is defined as a blank argument since we don't actually need it but only for syntactical purpose\n        return (upkeepNeeded, \"0x0\");\n    }\n\n    // Function to perform the upkeep i.e trigger this to choose our winner\n    function performUpKeep(\n        bytes calldata /* performData */\n    ) external {\n        // This function will basically first check the checkUpKeep function to determine if the conditions are meet to perform the upKeep\n        (bool upkeepNeeded, ) = checkUpKeep(\"\");\n        // Instead of doing a require or something we are using a if conditional statement\n        if (!upkeepNeeded) {\n            revert Raffle__UpkeepNotNeeded();\n        }\n        // Change the state of the Raffle to calculating so that no other players can be entered into the raffle\n        // This is different than the Keeper, while keepers will initiate this function from outside, this will use Chainlink to generate random number\n        uint256 requestId = i_vrfCoordinator.requestRandomWords(\n            i_gasLane,\n            i_subscriptionId,\n            REQUEST_CONFIRMATIONS,\n            i_callbackGasLimit,\n            NUM_WORDS\n        );\n        // Find out what event does this emit\n        emit RequestedRaffleWinner(requestId);\n    }\n\n    // Find out what is a override function\n    // This function is already present in the contract from which we are inheriting and will override it\n    function fulfillRandomWords(\n        uint256, /*requestId*/\n        // An array of random numbers\n        uint256[] memory randomWords\n    ) internal override {\n        // Find the index by the module operation by the players length\n        uint256 indexOfWinner = randomWords[0] % s_players.length;\n        // Specify the recent winner by the index generated\n        address payable recentWinner = s_players[indexOfWinner];\n        s_recentWinner = recentWinner;\n        // Reset our players array to 0\n        s_players = new address payable[](0);\n        // Reset the RaffleState\n        s_raffleState = RaffleState.Open;\n        // Reset the last time stamp with the current time\n        s_lastTimeStamp = block.timestamp;\n        // Pay the recent winner, the award is the entire amount owned by the contract i.e through the entrance fees\n        // N.B: The below is actually a very good way to pay as we are just calling a adrress but not any function\n        // so better use call with the payload instead of transfer or send\n        (bool success, ) = recentWinner.call{value: address(this).balance}(\"\");\n        if (!success) {\n            revert Raffle__TransferFailed();\n        }\n        emit WinnerPicked(recentWinner);\n    }\n}\n"
    },
    "@chainlink/contracts/src/v0.8/interfaces/VRFCoordinatorV2Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface VRFCoordinatorV2Interface {\n  /**\n   * @notice Get configuration relevant for making requests\n   * @return minimumRequestConfirmations global min for request confirmations\n   * @return maxGasLimit global max for request gas limit\n   * @return s_provingKeyHashes list of registered key hashes\n   */\n  function getRequestConfig()\n    external\n    view\n    returns (\n      uint16,\n      uint32,\n      bytes32[] memory\n    );\n\n  /**\n   * @notice Request a set of random words.\n   * @param keyHash - Corresponds to a particular oracle job which uses\n   * that key for generating the VRF proof. Different keyHash's have different gas price\n   * ceilings, so you can select a specific one to bound your maximum per request cost.\n   * @param subId  - The ID of the VRF subscription. Must be funded\n   * with the minimum subscription balance required for the selected keyHash.\n   * @param minimumRequestConfirmations - How many blocks you'd like the\n   * oracle to wait before responding to the request. See SECURITY CONSIDERATIONS\n   * for why you may want to request more. The acceptable range is\n   * [minimumRequestBlockConfirmations, 200].\n   * @param callbackGasLimit - How much gas you'd like to receive in your\n   * fulfillRandomWords callback. Note that gasleft() inside fulfillRandomWords\n   * may be slightly less than this amount because of gas used calling the function\n   * (argument decoding etc.), so you may need to request slightly more than you expect\n   * to have inside fulfillRandomWords. The acceptable range is\n   * [0, maxGasLimit]\n   * @param numWords - The number of uint256 random values you'd like to receive\n   * in your fulfillRandomWords callback. Note these numbers are expanded in a\n   * secure way by the VRFCoordinator from a single random value supplied by the oracle.\n   * @return requestId - A unique identifier of the request. Can be used to match\n   * a request to a response in fulfillRandomWords.\n   */\n  function requestRandomWords(\n    bytes32 keyHash,\n    uint64 subId,\n    uint16 minimumRequestConfirmations,\n    uint32 callbackGasLimit,\n    uint32 numWords\n  ) external returns (uint256 requestId);\n\n  /**\n   * @notice Create a VRF subscription.\n   * @return subId - A unique subscription id.\n   * @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\n   * @dev Note to fund the subscription, use transferAndCall. For example\n   * @dev  LINKTOKEN.transferAndCall(\n   * @dev    address(COORDINATOR),\n   * @dev    amount,\n   * @dev    abi.encode(subId));\n   */\n  function createSubscription() external returns (uint64 subId);\n\n  /**\n   * @notice Get a VRF subscription.\n   * @param subId - ID of the subscription\n   * @return balance - LINK balance of the subscription in juels.\n   * @return reqCount - number of requests for this subscription, determines fee tier.\n   * @return owner - owner of the subscription.\n   * @return consumers - list of consumer address which are able to use this subscription.\n   */\n  function getSubscription(uint64 subId)\n    external\n    view\n    returns (\n      uint96 balance,\n      uint64 reqCount,\n      address owner,\n      address[] memory consumers\n    );\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @param newOwner - proposed new owner of the subscription\n   */\n  function requestSubscriptionOwnerTransfer(uint64 subId, address newOwner) external;\n\n  /**\n   * @notice Request subscription owner transfer.\n   * @param subId - ID of the subscription\n   * @dev will revert if original owner of subId has\n   * not requested that msg.sender become the new owner.\n   */\n  function acceptSubscriptionOwnerTransfer(uint64 subId) external;\n\n  /**\n   * @notice Add a consumer to a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - New consumer which can use the subscription\n   */\n  function addConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Remove a consumer from a VRF subscription.\n   * @param subId - ID of the subscription\n   * @param consumer - Consumer to remove from the subscription\n   */\n  function removeConsumer(uint64 subId, address consumer) external;\n\n  /**\n   * @notice Cancel a subscription\n   * @param subId - ID of the subscription\n   * @param to - Where to send the remaining LINK to\n   */\n  function cancelSubscription(uint64 subId, address to) external;\n}\n"
    },
    "@chainlink/contracts/src/v0.8/VRFConsumerBaseV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\n/** ****************************************************************************\n * @notice Interface for contracts using VRF randomness\n * *****************************************************************************\n * @dev PURPOSE\n *\n * @dev Reggie the Random Oracle (not his real job) wants to provide randomness\n * @dev to Vera the verifier in such a way that Vera can be sure he's not\n * @dev making his output up to suit himself. Reggie provides Vera a public key\n * @dev to which he knows the secret key. Each time Vera provides a seed to\n * @dev Reggie, he gives back a value which is computed completely\n * @dev deterministically from the seed and the secret key.\n *\n * @dev Reggie provides a proof by which Vera can verify that the output was\n * @dev correctly computed once Reggie tells it to her, but without that proof,\n * @dev the output is indistinguishable to her from a uniform random sample\n * @dev from the output space.\n *\n * @dev The purpose of this contract is to make it easy for unrelated contracts\n * @dev to talk to Vera the verifier about the work Reggie is doing, to provide\n * @dev simple access to a verifiable source of randomness. It ensures 2 things:\n * @dev 1. The fulfillment came from the VRFCoordinator\n * @dev 2. The consumer contract implements fulfillRandomWords.\n * *****************************************************************************\n * @dev USAGE\n *\n * @dev Calling contracts must inherit from VRFConsumerBase, and can\n * @dev initialize VRFConsumerBase's attributes in their constructor as\n * @dev shown:\n *\n * @dev   contract VRFConsumer {\n * @dev     constructor(<other arguments>, address _vrfCoordinator, address _link)\n * @dev       VRFConsumerBase(_vrfCoordinator) public {\n * @dev         <initialization with other arguments goes here>\n * @dev       }\n * @dev   }\n *\n * @dev The oracle will have given you an ID for the VRF keypair they have\n * @dev committed to (let's call it keyHash). Create subscription, fund it\n * @dev and your consumer contract as a consumer of it (see VRFCoordinatorInterface\n * @dev subscription management functions).\n * @dev Call requestRandomWords(keyHash, subId, minimumRequestConfirmations,\n * @dev callbackGasLimit, numWords),\n * @dev see (VRFCoordinatorInterface for a description of the arguments).\n *\n * @dev Once the VRFCoordinator has received and validated the oracle's response\n * @dev to your request, it will call your contract's fulfillRandomWords method.\n *\n * @dev The randomness argument to fulfillRandomWords is a set of random words\n * @dev generated from your requestId and the blockHash of the request.\n *\n * @dev If your contract could have concurrent requests open, you can use the\n * @dev requestId returned from requestRandomWords to track which response is associated\n * @dev with which randomness request.\n * @dev See \"SECURITY CONSIDERATIONS\" for principles to keep in mind,\n * @dev if your contract could have multiple requests in flight simultaneously.\n *\n * @dev Colliding `requestId`s are cryptographically impossible as long as seeds\n * @dev differ.\n *\n * *****************************************************************************\n * @dev SECURITY CONSIDERATIONS\n *\n * @dev A method with the ability to call your fulfillRandomness method directly\n * @dev could spoof a VRF response with any random value, so it's critical that\n * @dev it cannot be directly called by anything other than this base contract\n * @dev (specifically, by the VRFConsumerBase.rawFulfillRandomness method).\n *\n * @dev For your users to trust that your contract's random behavior is free\n * @dev from malicious interference, it's best if you can write it so that all\n * @dev behaviors implied by a VRF response are executed *during* your\n * @dev fulfillRandomness method. If your contract must store the response (or\n * @dev anything derived from it) and use it later, you must ensure that any\n * @dev user-significant behavior which depends on that stored value cannot be\n * @dev manipulated by a subsequent VRF request.\n *\n * @dev Similarly, both miners and the VRF oracle itself have some influence\n * @dev over the order in which VRF responses appear on the blockchain, so if\n * @dev your contract could have multiple VRF requests in flight simultaneously,\n * @dev you must ensure that the order in which the VRF responses arrive cannot\n * @dev be used to manipulate your contract's user-significant behavior.\n *\n * @dev Since the block hash of the block which contains the requestRandomness\n * @dev call is mixed into the input to the VRF *last*, a sufficiently powerful\n * @dev miner could, in principle, fork the blockchain to evict the block\n * @dev containing the request, forcing the request to be included in a\n * @dev different block with a different hash, and therefore a different input\n * @dev to the VRF. However, such an attack would incur a substantial economic\n * @dev cost. This cost scales with the number of blocks the VRF oracle waits\n * @dev until it calls responds to a request. It is for this reason that\n * @dev that you can signal to an oracle you'd like them to wait longer before\n * @dev responding to the request (however this is not enforced in the contract\n * @dev and so remains effective only in the case of unmodified oracle software).\n */\nabstract contract VRFConsumerBaseV2 {\n  error OnlyCoordinatorCanFulfill(address have, address want);\n  address private immutable vrfCoordinator;\n\n  /**\n   * @param _vrfCoordinator address of VRFCoordinator contract\n   */\n  constructor(address _vrfCoordinator) {\n    vrfCoordinator = _vrfCoordinator;\n  }\n\n  /**\n   * @notice fulfillRandomness handles the VRF response. Your contract must\n   * @notice implement it. See \"SECURITY CONSIDERATIONS\" above for important\n   * @notice principles to keep in mind when implementing your fulfillRandomness\n   * @notice method.\n   *\n   * @dev VRFConsumerBaseV2 expects its subcontracts to have a method with this\n   * @dev signature, and will call it once it has verified the proof\n   * @dev associated with the randomness. (It is triggered via a call to\n   * @dev rawFulfillRandomness, below.)\n   *\n   * @param requestId The Id initially returned by requestRandomness\n   * @param randomWords the VRF output expanded to the requested number of words\n   */\n  function fulfillRandomWords(uint256 requestId, uint256[] memory randomWords) internal virtual;\n\n  // rawFulfillRandomness is called by VRFCoordinator when it receives a valid VRF\n  // proof. rawFulfillRandomness then calls fulfillRandomness, after validating\n  // the origin of the call\n  function rawFulfillRandomWords(uint256 requestId, uint256[] memory randomWords) external {\n    if (msg.sender != vrfCoordinator) {\n      revert OnlyCoordinatorCanFulfill(msg.sender, vrfCoordinator);\n    }\n    fulfillRandomWords(requestId, randomWords);\n  }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}